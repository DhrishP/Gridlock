Creating your own package in Java involves organizing your classes into a directory structure that reflects the package hierarchy. Here are step-by-step instructions on how to create your own package:

### Step 1: Create a Directory Structure

Create a directory for your Java project. Inside this directory, create subdirectories to represent your package structure. For example, if your package is `com.example.myapp`, create the following directory structure:

```
myproject/
|-- com/
|   `-- example/
|       `-- myapp/
```

### Step 2: Write Your Java Classes

Write your Java classes and save them in the corresponding directories. For the package `com.example.myapp`, your class files should be located in the `myproject/com/example/myapp/` directory.

```java
// myproject/com/example/myapp/MyClass.java

package com.example.myapp;

public class MyClass {
    public void display() {
        System.out.println("Hello from MyClass!");
    }
}
```

### Step 3: Compile Your Java Classes

Open a terminal or command prompt, navigate to the `myproject` directory, and compile your Java classes using the `javac` command. Make sure to compile all the classes in your package.

```bash
javac com/example/myapp/MyClass.java
```

### Step 4: Create a JAR File (Optional)

If you want to distribute your package as a JAR (Java Archive) file, you can create one using the `jar` command. Navigate to the `myproject` directory and run the following command:

```bash
jar cvf myapp.jar com/example/myapp/*.class
```

This command creates a JAR file named `myapp.jar` containing all the compiled `.class` files.

### Step 5: Use Your Package in Another Java Program

Create another Java file in a separate directory and import the classes from your package.

```java
// myproject/MyApp.java

import com.example.myapp.MyClass;

public class MyApp {
    public static void main(String[] args) {
        MyClass myObject = new MyClass();
        myObject.display();
    }
}
```

### Step 6: Compile and Run Your Main Program

Compile and run your main program. Make sure to include the current directory in the classpath.

```bash
javac -cp . MyApp.java
java -cp . MyApp
```

### Notes:

- The `javac` command compiles Java source files, and the `-cp` option specifies the classpath.
- The package declaration in your source file (`package com.example.myapp;`) should match the directory structure.
- The directory structure should mirror the package hierarchy.
- The `import` statement in your main program references the fully qualified name of the class.

This basic process demonstrates how to create your own package in Java. You can further organize your classes within the package and create more complex package hierarchies as your project grows.